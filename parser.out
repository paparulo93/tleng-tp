Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> first
Rule 1     first -> value
Rule 2     object -> LLAVEIZQ LLAVEDER
Rule 3     object -> LLAVEIZQ members LLAVEDER
Rule 4     members -> pair
Rule 5     members -> pair COMA members
Rule 6     pair -> STRING DOSPUNTOS value
Rule 7     array -> CORCHEIZQ CORCHEDER
Rule 8     array -> CORCHEIZQ elements CORCHEDER
Rule 9     elements -> value COMA elements
Rule 10    elements -> value
Rule 11    value -> array
Rule 12    value -> object
Rule 13    value -> STRING
Rule 14    value -> NUMBER
Rule 15    value -> TRUE
Rule 16    value -> FALSE
Rule 17    value -> NULL

Terminals, with rules where they appear

COMA                 : 5 9
CORCHEDER            : 7 8
CORCHEIZQ            : 7 8
DOSPUNTOS            : 6
FALSE                : 16
LLAVEDER             : 2 3
LLAVEIZQ             : 2 3
NULL                 : 17
NUMBER               : 14
STRING               : 6 13
TRUE                 : 15
error                : 

Nonterminals, with rules where they appear

array                : 11
elements             : 8 9
first                : 0
members              : 3 5
object               : 12
pair                 : 4 5
value                : 1 6 9 10

Parsing method: LALR

state 0

    (0) S' -> . first
    (1) first -> . value
    (11) value -> . array
    (12) value -> . object
    (13) value -> . STRING
    (14) value -> . NUMBER
    (15) value -> . TRUE
    (16) value -> . FALSE
    (17) value -> . NULL
    (7) array -> . CORCHEIZQ CORCHEDER
    (8) array -> . CORCHEIZQ elements CORCHEDER
    (2) object -> . LLAVEIZQ LLAVEDER
    (3) object -> . LLAVEIZQ members LLAVEDER

    STRING          shift and go to state 3
    NUMBER          shift and go to state 4
    TRUE            shift and go to state 7
    FALSE           shift and go to state 10
    NULL            shift and go to state 9
    CORCHEIZQ       shift and go to state 5
    LLAVEIZQ        shift and go to state 11

    array                          shift and go to state 1
    first                          shift and go to state 2
    value                          shift and go to state 6
    object                         shift and go to state 8

state 1

    (11) value -> array .

    COMA            reduce using rule 11 (value -> array .)
    CORCHEDER       reduce using rule 11 (value -> array .)
    $end            reduce using rule 11 (value -> array .)
    LLAVEDER        reduce using rule 11 (value -> array .)


state 2

    (0) S' -> first .



state 3

    (13) value -> STRING .

    COMA            reduce using rule 13 (value -> STRING .)
    CORCHEDER       reduce using rule 13 (value -> STRING .)
    $end            reduce using rule 13 (value -> STRING .)
    LLAVEDER        reduce using rule 13 (value -> STRING .)


state 4

    (14) value -> NUMBER .

    COMA            reduce using rule 14 (value -> NUMBER .)
    CORCHEDER       reduce using rule 14 (value -> NUMBER .)
    $end            reduce using rule 14 (value -> NUMBER .)
    LLAVEDER        reduce using rule 14 (value -> NUMBER .)


state 5

    (7) array -> CORCHEIZQ . CORCHEDER
    (8) array -> CORCHEIZQ . elements CORCHEDER
    (9) elements -> . value COMA elements
    (10) elements -> . value
    (11) value -> . array
    (12) value -> . object
    (13) value -> . STRING
    (14) value -> . NUMBER
    (15) value -> . TRUE
    (16) value -> . FALSE
    (17) value -> . NULL
    (7) array -> . CORCHEIZQ CORCHEDER
    (8) array -> . CORCHEIZQ elements CORCHEDER
    (2) object -> . LLAVEIZQ LLAVEDER
    (3) object -> . LLAVEIZQ members LLAVEDER

    CORCHEDER       shift and go to state 13
    STRING          shift and go to state 3
    NUMBER          shift and go to state 4
    TRUE            shift and go to state 7
    FALSE           shift and go to state 10
    NULL            shift and go to state 9
    CORCHEIZQ       shift and go to state 5
    LLAVEIZQ        shift and go to state 11

    array                          shift and go to state 1
    value                          shift and go to state 12
    elements                       shift and go to state 14
    object                         shift and go to state 8

state 6

    (1) first -> value .

    $end            reduce using rule 1 (first -> value .)


state 7

    (15) value -> TRUE .

    COMA            reduce using rule 15 (value -> TRUE .)
    CORCHEDER       reduce using rule 15 (value -> TRUE .)
    $end            reduce using rule 15 (value -> TRUE .)
    LLAVEDER        reduce using rule 15 (value -> TRUE .)


state 8

    (12) value -> object .

    COMA            reduce using rule 12 (value -> object .)
    CORCHEDER       reduce using rule 12 (value -> object .)
    $end            reduce using rule 12 (value -> object .)
    LLAVEDER        reduce using rule 12 (value -> object .)


state 9

    (17) value -> NULL .

    COMA            reduce using rule 17 (value -> NULL .)
    CORCHEDER       reduce using rule 17 (value -> NULL .)
    $end            reduce using rule 17 (value -> NULL .)
    LLAVEDER        reduce using rule 17 (value -> NULL .)


state 10

    (16) value -> FALSE .

    COMA            reduce using rule 16 (value -> FALSE .)
    CORCHEDER       reduce using rule 16 (value -> FALSE .)
    $end            reduce using rule 16 (value -> FALSE .)
    LLAVEDER        reduce using rule 16 (value -> FALSE .)


state 11

    (2) object -> LLAVEIZQ . LLAVEDER
    (3) object -> LLAVEIZQ . members LLAVEDER
    (4) members -> . pair
    (5) members -> . pair COMA members
    (6) pair -> . STRING DOSPUNTOS value

    LLAVEDER        shift and go to state 16
    STRING          shift and go to state 17

    pair                           shift and go to state 18
    members                        shift and go to state 15

state 12

    (9) elements -> value . COMA elements
    (10) elements -> value .

    COMA            shift and go to state 19
    CORCHEDER       reduce using rule 10 (elements -> value .)


state 13

    (7) array -> CORCHEIZQ CORCHEDER .

    $end            reduce using rule 7 (array -> CORCHEIZQ CORCHEDER .)
    COMA            reduce using rule 7 (array -> CORCHEIZQ CORCHEDER .)
    CORCHEDER       reduce using rule 7 (array -> CORCHEIZQ CORCHEDER .)
    LLAVEDER        reduce using rule 7 (array -> CORCHEIZQ CORCHEDER .)


state 14

    (8) array -> CORCHEIZQ elements . CORCHEDER

    CORCHEDER       shift and go to state 20


state 15

    (3) object -> LLAVEIZQ members . LLAVEDER

    LLAVEDER        shift and go to state 21


state 16

    (2) object -> LLAVEIZQ LLAVEDER .

    $end            reduce using rule 2 (object -> LLAVEIZQ LLAVEDER .)
    COMA            reduce using rule 2 (object -> LLAVEIZQ LLAVEDER .)
    LLAVEDER        reduce using rule 2 (object -> LLAVEIZQ LLAVEDER .)
    CORCHEDER       reduce using rule 2 (object -> LLAVEIZQ LLAVEDER .)


state 17

    (6) pair -> STRING . DOSPUNTOS value

    DOSPUNTOS       shift and go to state 22


state 18

    (4) members -> pair .
    (5) members -> pair . COMA members

    LLAVEDER        reduce using rule 4 (members -> pair .)
    COMA            shift and go to state 23


state 19

    (9) elements -> value COMA . elements
    (9) elements -> . value COMA elements
    (10) elements -> . value
    (11) value -> . array
    (12) value -> . object
    (13) value -> . STRING
    (14) value -> . NUMBER
    (15) value -> . TRUE
    (16) value -> . FALSE
    (17) value -> . NULL
    (7) array -> . CORCHEIZQ CORCHEDER
    (8) array -> . CORCHEIZQ elements CORCHEDER
    (2) object -> . LLAVEIZQ LLAVEDER
    (3) object -> . LLAVEIZQ members LLAVEDER

    STRING          shift and go to state 3
    NUMBER          shift and go to state 4
    TRUE            shift and go to state 7
    FALSE           shift and go to state 10
    NULL            shift and go to state 9
    CORCHEIZQ       shift and go to state 5
    LLAVEIZQ        shift and go to state 11

    array                          shift and go to state 1
    value                          shift and go to state 12
    elements                       shift and go to state 24
    object                         shift and go to state 8

state 20

    (8) array -> CORCHEIZQ elements CORCHEDER .

    $end            reduce using rule 8 (array -> CORCHEIZQ elements CORCHEDER .)
    COMA            reduce using rule 8 (array -> CORCHEIZQ elements CORCHEDER .)
    CORCHEDER       reduce using rule 8 (array -> CORCHEIZQ elements CORCHEDER .)
    LLAVEDER        reduce using rule 8 (array -> CORCHEIZQ elements CORCHEDER .)


state 21

    (3) object -> LLAVEIZQ members LLAVEDER .

    $end            reduce using rule 3 (object -> LLAVEIZQ members LLAVEDER .)
    COMA            reduce using rule 3 (object -> LLAVEIZQ members LLAVEDER .)
    LLAVEDER        reduce using rule 3 (object -> LLAVEIZQ members LLAVEDER .)
    CORCHEDER       reduce using rule 3 (object -> LLAVEIZQ members LLAVEDER .)


state 22

    (6) pair -> STRING DOSPUNTOS . value
    (11) value -> . array
    (12) value -> . object
    (13) value -> . STRING
    (14) value -> . NUMBER
    (15) value -> . TRUE
    (16) value -> . FALSE
    (17) value -> . NULL
    (7) array -> . CORCHEIZQ CORCHEDER
    (8) array -> . CORCHEIZQ elements CORCHEDER
    (2) object -> . LLAVEIZQ LLAVEDER
    (3) object -> . LLAVEIZQ members LLAVEDER

    STRING          shift and go to state 3
    NUMBER          shift and go to state 4
    TRUE            shift and go to state 7
    FALSE           shift and go to state 10
    NULL            shift and go to state 9
    CORCHEIZQ       shift and go to state 5
    LLAVEIZQ        shift and go to state 11

    array                          shift and go to state 1
    value                          shift and go to state 25
    object                         shift and go to state 8

state 23

    (5) members -> pair COMA . members
    (4) members -> . pair
    (5) members -> . pair COMA members
    (6) pair -> . STRING DOSPUNTOS value

    STRING          shift and go to state 17

    members                        shift and go to state 26
    pair                           shift and go to state 18

state 24

    (9) elements -> value COMA elements .

    CORCHEDER       reduce using rule 9 (elements -> value COMA elements .)


state 25

    (6) pair -> STRING DOSPUNTOS value .

    COMA            reduce using rule 6 (pair -> STRING DOSPUNTOS value .)
    LLAVEDER        reduce using rule 6 (pair -> STRING DOSPUNTOS value .)


state 26

    (5) members -> pair COMA members .

    LLAVEDER        reduce using rule 5 (members -> pair COMA members .)

